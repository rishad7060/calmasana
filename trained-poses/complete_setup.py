"""
COMPLETE AUTOMATED SETUP
This will do everything needed to make manual poses work with AI detection
"""

import os
import subprocess
import time
import shutil

def run_step(command, description, timeout=None):
    """Run a setup step with progress tracking"""
    print(f"\n{'='*60}")
    print(f"‚è≥ {description}")
    print(f"{'='*60}")
    print(f"Running: {command}")
    
    try:
        result = subprocess.run(command, shell=True, timeout=timeout, 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - SUCCESS")
            return True
        else:
            print(f"‚ùå {description} - FAILED")
            print(f"Error: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - TIMEOUT")
        return False
    except Exception as e:
        print(f"‚ùå {description} - ERROR: {e}")
        return False

def check_requirements():
    """Check if all required packages are installed"""
    print("Checking Python packages...")
    
    required = ['cv2', 'tensorflow', 'pandas', 'numpy', 'sklearn']
    missing = []
    
    for package in required:
        try:
            if package == 'cv2':
                import cv2
            elif package == 'sklearn':
                import sklearn
            else:
                __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing.append(package)
            print(f"‚ùå {package}")
    
    if missing:
        print(f"\nInstalling missing packages: {missing}")
        packages_to_install = []
        for pkg in missing:
            if pkg == 'cv2':
                packages_to_install.append('opencv-python')
            elif pkg == 'sklearn':
                packages_to_install.append('scikit-learn')
            else:
                packages_to_install.append(pkg)
        
        for pkg in packages_to_install:
            subprocess.run(['pip', 'install', pkg])
    
    return len(missing) == 0

def main():
    print("üßò COMPLETE MANUAL POSES SETUP")
    print("="*60)
    print("This will automatically:")
    print("1. Check requirements")
    print("2. Collect training data (interactive)")
    print("3. Process images")
    print("4. Train AI model")  
    print("5. Update frontend")
    print("6. Copy model files")
    print("\nTotal time: ~30-45 minutes")
    
    # Check if we're in the right directory
    if not os.path.exists('yoga_poses'):
        print("‚ùå Error: Not in correct directory")
        print("Please run this from: D:\\FD\\yoga\\CalmAsana\\classification model\\")
        return
    
    # Get user confirmation
    proceed = input("\nDo you want to proceed with complete setup? (y/n): ")
    if proceed.lower() != 'y':
        print("Setup cancelled")
        return
    
    print(f"\nüöÄ Starting complete setup...")
    start_time = time.time()
    
    # Step 1: Check requirements
    print(f"\nüìã STEP 1: Checking requirements")
    if not check_requirements():
        print("‚ùå Requirements check failed")
        return
    
    # Step 2: Collect training data (interactive)
    print(f"\nüì∏ STEP 2: Collect training data")
    print("This step requires your participation to pose for the camera")
    print("You'll collect data for 5 poses: Mountain, Child, Bridge, Plank, Cat-Cow")
    
    collect_data = input("\nReady to collect training data? (y/n): ")
    if collect_data.lower() == 'y':
        success = run_step("python fast_data_collection.py", 
                          "Collecting training data", timeout=1800)  # 30 min timeout
        if not success:
            print("‚ùå Data collection failed. Cannot proceed.")
            return
    else:
        print("‚ö†Ô∏è Skipping data collection")
        print("Note: Without new training data, manual poses won't work")
    
    # Step 3: Process images
    print(f"\nüîç STEP 3: Processing images")
    success = run_step("python proprocessing.py", 
                      "Processing images to extract keypoints", timeout=600)  # 10 min
    if not success:
        print("‚ùå Image processing failed")
        return
    
    # Step 4: Train model
    print(f"\nü§ñ STEP 4: Training AI model")
    success = run_step("python training_all_poses.py", 
                      "Training pose classification model", timeout=1800)  # 30 min
    if not success:
        print("‚ùå Model training failed")
        return
    
    # Step 5: Update frontend
    print(f"\nüì± STEP 5: Updating frontend")
    success = run_step("python enable_manual_poses.py", 
                      "Enabling manual poses in frontend", timeout=60)
    if not success:
        print("‚ùå Frontend update failed")
        return
    
    # Step 6: Copy model files
    print(f"\nüìÅ STEP 6: Copying model files")
    try:
        frontend_public = "../frontend/public"
        if os.path.exists(frontend_public):
            shutil.copy("model/model.json", f"{frontend_public}/model.json")
            shutil.copy("model/group1-shard1of1.bin", f"{frontend_public}/group1-shard1of1.bin")
            print("‚úÖ Model files copied to frontend")
        else:
            print(f"‚ùå Frontend directory not found: {frontend_public}")
            return
    except Exception as e:
        print(f"‚ùå Error copying files: {e}")
        return
    
    # Success!
    end_time = time.time()
    total_time = int((end_time - start_time) / 60)
    
    print(f"\n{'='*60}")
    print("üéâ SETUP COMPLETE!")
    print(f"{'='*60}")
    print(f"‚è±Ô∏è Total time: {total_time} minutes")
    
    print(f"\n‚úÖ What was accomplished:")
    print("‚Ä¢ Collected training data for manual poses")
    print("‚Ä¢ Processed images to extract pose keypoints")
    print("‚Ä¢ Trained AI model with all poses")
    print("‚Ä¢ Updated frontend to enable camera detection")
    print("‚Ä¢ Copied new model files to frontend")
    
    print(f"\nüßò All 5 manual poses now work with AI detection!")
    print("‚Ä¢ Mountain Pose")
    print("‚Ä¢ Child Pose")
    print("‚Ä¢ Bridge Pose") 
    print("‚Ä¢ Plank Pose")
    print("‚Ä¢ Cat-Cow Pose")
    
    print(f"\nüì± To test:")
    print("1. Restart your frontend application")
    print("2. Go to Poses library")
    print("3. Click 'Practice This Pose' on any manual pose")
    print("4. You should see 'ü§ñ AI Detection Mode'")
    print("5. Camera will open and detect your poses!")
    
    print(f"\nüí° Tips:")
    print("‚Ä¢ Make sure you have good lighting")
    print("‚Ä¢ Stand clearly in camera frame")
    print("‚Ä¢ If detection seems off, you can collect more training data")

if __name__ == "__main__":
    main()