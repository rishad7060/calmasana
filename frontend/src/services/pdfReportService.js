/**
 * PDF Report Generation Service
 * Creates downloadable PDF reports for sessions and dashboard summaries
 */

import jsPDF from 'jspdf'
import { achievementService } from './achievementService'

export class PDFReportService {
  constructor() {
    this.primaryColor = '#667eea'
    this.secondaryColor = '#764ba2'
    this.textColor = '#2d3748'
    this.lightGray = '#f7fafc'
    this.mediumGray = '#e2e8f0'
  }

  // Generate individual session report
  generateSessionReport(sessionData, userProfile) {
    const doc = new jsPDF()
    const pageWidth = doc.internal.pageSize.width
    const pageHeight = doc.internal.pageSize.height
    let yPosition = 20

    // Header
    this.addHeader(doc, 'Yoga Session Report', yPosition)
    yPosition += 25

    // Session overview
    yPosition = this.addSessionOverview(doc, sessionData, yPosition)
    yPosition += 10

    // Pose performance breakdown
    if (sessionData.poseResults && sessionData.poseResults.length > 0) {
      yPosition = this.addPoseBreakdown(doc, sessionData.poseResults, yPosition)
      yPosition += 10
    }

    // Performance insights
    yPosition = this.addPerformanceInsights(doc, sessionData, userProfile, yPosition)
    yPosition += 10

    // Recommendations
    yPosition = this.addRecommendations(doc, sessionData, userProfile, yPosition)

    // Footer
    this.addFooter(doc, 'Generated by CalmAsana - Your AI Yoga Companion')

    return doc
  }

  // Generate comprehensive dashboard report
  generateDashboardReport(userProfile, allSessions, achievements) {
    const doc = new jsPDF()
    let yPosition = 20

    // Header
    this.addHeader(doc, 'Yoga Progress Report', yPosition)
    yPosition += 25

    // User profile summary
    yPosition = this.addUserProfileSummary(doc, userProfile, yPosition)
    yPosition += 15

    // Practice statistics
    yPosition = this.addPracticeStatistics(doc, allSessions, yPosition)
    yPosition += 15

    // Progress charts and trends
    yPosition = this.addProgressTrends(doc, allSessions, yPosition)
    yPosition += 15

    // Achievement summary
    if (yPosition > 200) {
      doc.addPage()
      yPosition = 20
    }
    yPosition = this.addAchievementSummary(doc, achievements, yPosition)
    yPosition += 15

    // Goal progress
    yPosition = this.addGoalProgress(doc, userProfile, allSessions, yPosition)
    yPosition += 15

    // AI recommendations history
    if (yPosition > 200) {
      doc.addPage()
      yPosition = 20
    }
    yPosition = this.addAIRecommendationsHistory(doc, allSessions, yPosition)

    // Footer
    this.addFooter(doc, `Report generated on ${new Date().toLocaleDateString()} | CalmAsana AI`)

    return doc
  }

  // Add document header
  addHeader(doc, title, yPosition) {
    const pageWidth = doc.internal.pageSize.width
    
    // Logo area (placeholder)
    doc.setFillColor(103, 126, 234) // Primary color
    doc.rect(15, yPosition - 5, 50, 15, 'F')
    
    // Logo text
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('ðŸ§˜ CalmAsana', 18, yPosition + 4)
    
    // Title
    doc.setTextColor(45, 55, 72) // Text color
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    doc.text(title, pageWidth / 2, yPosition + 4, { align: 'center' })
    
    // Date
    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.text(new Date().toLocaleDateString(), pageWidth - 20, yPosition + 4, { align: 'right' })
    
    // Separator line
    doc.setDrawColor(226, 232, 240)
    doc.line(15, yPosition + 10, pageWidth - 15, yPosition + 10)
  }

  // Add session overview section
  addSessionOverview(doc, sessionData, yPosition) {
    const startY = yPosition
    
    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Session Overview', 15, yPosition)
    yPosition += 8

    // Create overview box
    doc.setFillColor(247, 250, 252)
    doc.rect(15, yPosition, 180, 35, 'F')
    doc.setDrawColor(226, 232, 240)
    doc.rect(15, yPosition, 180, 35)

    // Session details in columns
    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(74, 85, 104)

    // Left column
    yPosition += 8
    doc.text('Date:', 20, yPosition)
    doc.text(new Date(sessionData.date).toLocaleDateString(), 45, yPosition)

    yPosition += 6
    doc.text('Duration:', 20, yPosition)
    doc.text(`${Math.round(sessionData.totalTime / 60)} minutes`, 45, yPosition)

    yPosition += 6
    doc.text('Poses Practiced:', 20, yPosition)
    doc.text(`${sessionData.posesAttempted || 1}`, 45, yPosition)

    // Right column
    yPosition -= 12
    doc.text('Average Score:', 105, yPosition)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(103, 126, 234)
    doc.text(`${sessionData.avgScore || 0}%`, 140, yPosition)

    yPosition += 6
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(74, 85, 104)
    doc.text('Perfect Poses:', 105, yPosition)
    doc.text(`${sessionData.perfectPoses || 0}`, 140, yPosition)

    yPosition += 6
    doc.text('Session Type:', 105, yPosition)
    doc.text(sessionData.isAIGenerated ? 'AI Guided' : 'Manual Practice', 140, yPosition)

    return startY + 45
  }

  // Add pose breakdown section
  addPoseBreakdown(doc, poseResults, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Pose Performance Breakdown', 15, yPosition)
    yPosition += 10

    // Table header
    doc.setFillColor(103, 126, 234)
    doc.rect(15, yPosition, 180, 8, 'F')
    
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(10)
    doc.setFont('helvetica', 'bold')
    doc.text('Pose Name', 20, yPosition + 5)
    doc.text('Score', 80, yPosition + 5)
    doc.text('Hold Time', 110, yPosition + 5)
    doc.text('Attempts', 140, yPosition + 5)
    doc.text('Grade', 170, yPosition + 5)

    yPosition += 8

    // Table rows
    poseResults.forEach((pose, index) => {
      const rowColor = index % 2 === 0 ? 247 : 255
      doc.setFillColor(rowColor, 250, 252)
      doc.rect(15, yPosition, 180, 7, 'F')

      doc.setTextColor(45, 55, 72)
      doc.setFont('helvetica', 'normal')
      doc.text(pose.name, 20, yPosition + 4)
      doc.text(`${pose.score}%`, 80, yPosition + 4)
      doc.text(`${pose.time}s`, 110, yPosition + 4)
      doc.text(`${pose.attempts || 1}`, 140, yPosition + 4)
      
      // Grade with color coding
      const grade = this.getScoreGrade(pose.score)
      doc.setTextColor(this.getGradeColor(grade))
      doc.setFont('helvetica', 'bold')
      doc.text(grade, 170, yPosition + 4)

      yPosition += 7
    })

    return yPosition + 5
  }

  // Add performance insights section
  addPerformanceInsights(doc, sessionData, userProfile, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Performance Insights', 15, yPosition)
    yPosition += 10

    // Insights box
    doc.setFillColor(240, 253, 244)
    doc.rect(15, yPosition, 180, 30, 'F')
    doc.setDrawColor(34, 197, 94)
    doc.rect(15, yPosition, 180, 30)

    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(21, 128, 61)

    yPosition += 8
    
    // Generate insights based on performance
    const insights = this.generateSessionInsights(sessionData, userProfile)
    insights.forEach(insight => {
      doc.text(`â€¢ ${insight}`, 20, yPosition)
      yPosition += 6
    })

    return startY + 35
  }

  // Add recommendations section
  addRecommendations(doc, sessionData, userProfile, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Recommendations for Next Session', 15, yPosition)
    yPosition += 10

    // Recommendations box
    doc.setFillColor(254, 243, 199)
    doc.rect(15, yPosition, 180, 25, 'F')
    doc.setDrawColor(245, 158, 11)
    doc.rect(15, yPosition, 180, 25)

    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(146, 64, 14)

    yPosition += 8

    const recommendations = this.generateRecommendations(sessionData, userProfile)
    recommendations.forEach(rec => {
      doc.text(`â€¢ ${rec}`, 20, yPosition)
      yPosition += 6
    })

    return startY + 30
  }

  // Add user profile summary
  addUserProfileSummary(doc, userProfile, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Your Yoga Profile', 15, yPosition)
    yPosition += 10

    // Profile box
    doc.setFillColor(247, 250, 252)
    doc.rect(15, yPosition, 180, 25, 'F')
    doc.setDrawColor(226, 232, 240)
    doc.rect(15, yPosition, 180, 25)

    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(74, 85, 104)

    yPosition += 8
    doc.text(`Experience Level: ${userProfile.experience?.level || 'Not set'}`, 20, yPosition)
    yPosition += 5
    doc.text(`Primary Goals: ${userProfile.experience?.goals?.join(', ') || 'Not set'}`, 20, yPosition)
    yPosition += 5
    doc.text(`Practice Frequency: ${userProfile.experience?.frequency || 'Not set'}`, 20, yPosition)

    return startY + 30
  }

  // Add practice statistics
  addPracticeStatistics(doc, allSessions, yPosition) {
    const startY = yPosition
    const stats = this.calculatePracticeStats(allSessions)

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Practice Statistics', 15, yPosition)
    yPosition += 10

    // Stats grid
    const statItems = [
      { label: 'Total Sessions', value: stats.totalSessions },
      { label: 'Total Practice Time', value: `${Math.round(stats.totalTime / 60)} minutes` },
      { label: 'Average Session Score', value: `${stats.averageScore}%` },
      { label: 'Best Session Score', value: `${stats.bestScore}%` },
      { label: 'Current Streak', value: `${stats.currentStreak} days` },
      { label: 'Favorite Pose', value: stats.favoritePose }
    ]

    // Create grid layout
    const gridCols = 2
    const gridRows = Math.ceil(statItems.length / gridCols)
    const cellWidth = 90
    const cellHeight = 15

    for (let i = 0; i < statItems.length; i++) {
      const row = Math.floor(i / gridCols)
      const col = i % gridCols
      const x = 15 + col * 90
      const y = yPosition + row * 18

      // Stat box
      doc.setFillColor(103, 126, 234)
      doc.rect(x, y, cellWidth - 5, cellHeight, 'F')

      // Label
      doc.setTextColor(255, 255, 255)
      doc.setFontSize(8)
      doc.setFont('helvetica', 'normal')
      doc.text(statItems[i].label, x + 3, y + 5)

      // Value
      doc.setFontSize(12)
      doc.setFont('helvetica', 'bold')
      doc.text(statItems[i].value, x + 3, y + 12)
    }

    return startY + gridRows * 18 + 5
  }

  // Add progress trends
  addProgressTrends(doc, allSessions, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Progress Trends (Last 30 Days)', 15, yPosition)
    yPosition += 10

    // Simple text-based trend analysis
    const trends = this.analyzeTrends(allSessions)
    
    doc.setFillColor(240, 249, 255)
    doc.rect(15, yPosition, 180, 25, 'F')
    doc.setDrawColor(59, 130, 246)
    doc.rect(15, yPosition, 180, 25)

    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(30, 64, 175)

    yPosition += 8
    trends.forEach(trend => {
      doc.text(`â€¢ ${trend}`, 20, yPosition)
      yPosition += 6
    })

    return startY + 30
  }

  // Add achievement summary
  addAchievementSummary(doc, achievements, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Achievement Summary', 15, yPosition)
    yPosition += 10

    const unlockedAchievements = Object.values(achievements).filter(a => a.unlocked)
    const totalAchievements = Object.keys(achievements).length

    // Achievement stats
    doc.setFillColor(254, 240, 138)
    doc.rect(15, yPosition, 180, 15, 'F')
    doc.setDrawColor(245, 158, 11)
    doc.rect(15, yPosition, 180, 15)

    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(146, 64, 14)
    doc.text(`${unlockedAchievements.length} of ${totalAchievements} achievements unlocked`, 20, yPosition + 10)

    yPosition += 20

    // List recent achievements
    if (unlockedAchievements.length > 0) {
      doc.setFontSize(10)
      doc.setFont('helvetica', 'normal')
      doc.setTextColor(74, 85, 104)
      
      unlockedAchievements.slice(0, 5).forEach(achievement => {
        doc.text(`${achievement.icon} ${achievement.title} - ${achievement.description}`, 20, yPosition)
        yPosition += 6
      })
    }

    return yPosition + 5
  }

  // Add goal progress section
  addGoalProgress(doc, userProfile, allSessions, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('Goal Progress', 15, yPosition)
    yPosition += 10

    const goals = userProfile.experience?.goals || []
    if (goals.length === 0) {
      doc.setFontSize(10)
      doc.setTextColor(156, 163, 175)
      doc.text('No specific goals set. Consider setting goals in your profile.', 20, yPosition)
      return yPosition + 10
    }

    // Goal progress for each goal
    goals.forEach(goal => {
      const progress = this.calculateGoalProgress(goal, allSessions)
      
      doc.setFontSize(10)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(45, 55, 72)
      doc.text(`${goal}:`, 20, yPosition)
      
      doc.setFont('helvetica', 'normal')
      doc.setTextColor(74, 85, 104)
      doc.text(progress.description, 50, yPosition)
      
      yPosition += 8
    })

    return yPosition + 5
  }

  // Add AI recommendations history
  addAIRecommendationsHistory(doc, allSessions, yPosition) {
    const startY = yPosition

    // Section title
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(45, 55, 72)
    doc.text('AI Recommendations Follow-Through', 15, yPosition)
    yPosition += 10

    const aiSessions = allSessions.filter(s => s.isAIGenerated || s.planId)
    
    if (aiSessions.length === 0) {
      doc.setFontSize(10)
      doc.setTextColor(156, 163, 175)
      doc.text('No AI-guided sessions completed yet.', 20, yPosition)
      return yPosition + 10
    }

    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(74, 85, 104)
    doc.text(`You've completed ${aiSessions.length} AI-recommended sessions.`, 20, yPosition)
    yPosition += 8

    const avgAIScore = aiSessions.reduce((sum, s) => sum + s.avgScore, 0) / aiSessions.length
    doc.text(`Average performance on AI recommendations: ${Math.round(avgAIScore)}%`, 20, yPosition)

    return yPosition + 15
  }

  // Add footer
  addFooter(doc, text) {
    const pageHeight = doc.internal.pageSize.height
    const pageWidth = doc.internal.pageSize.width
    
    doc.setDrawColor(226, 232, 240)
    doc.line(15, pageHeight - 20, pageWidth - 15, pageHeight - 20)
    
    doc.setFontSize(8)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(156, 163, 175)
    doc.text(text, pageWidth / 2, pageHeight - 12, { align: 'center' })
  }

  // Helper methods
  getScoreGrade(score) {
    if (score >= 95) return 'A+'
    if (score >= 90) return 'A'
    if (score >= 85) return 'B+'
    if (score >= 80) return 'B'
    if (score >= 75) return 'C+'
    if (score >= 70) return 'C'
    return 'D'
  }

  getGradeColor(grade) {
    switch (grade) {
      case 'A+': case 'A': return [34, 197, 94] // Green
      case 'B+': case 'B': return [59, 130, 246] // Blue
      case 'C+': case 'C': return [245, 158, 11] // Orange
      default: return [239, 68, 68] // Red
    }
  }

  generateSessionInsights(sessionData, userProfile) {
    const insights = []
    const score = sessionData.avgScore || 0

    if (score >= 90) {
      insights.push('Excellent performance! You maintained great form throughout.')
    } else if (score >= 70) {
      insights.push('Good session with solid pose execution.')
    } else if (score >= 50) {
      insights.push('Decent practice - focus on holding poses longer for better scores.')
    } else {
      insights.push('Room for improvement - consider slowing down and focusing on form.')
    }

    if (sessionData.totalTime >= 1800) { // 30+ minutes
      insights.push('Great endurance shown with a long practice session.')
    }

    if (sessionData.perfectPoses > 0) {
      insights.push(`You achieved perfect form in ${sessionData.perfectPoses} pose(s)!`)
    }

    return insights
  }

  generateRecommendations(sessionData, userProfile) {
    const recommendations = []
    const score = sessionData.avgScore || 0

    if (score < 70) {
      recommendations.push('Focus on holding poses longer to improve your scores.')
      recommendations.push('Consider practicing the same poses to build muscle memory.')
    }

    if (sessionData.totalTime < 600) { // Less than 10 minutes
      recommendations.push('Try extending your practice time for greater benefits.')
    }

    recommendations.push('Practice regularly to maintain and improve your progress.')
    
    return recommendations
  }

  calculatePracticeStats(allSessions) {
    if (!allSessions || allSessions.length === 0) {
      return {
        totalSessions: 0,
        totalTime: 0,
        averageScore: 0,
        bestScore: 0,
        currentStreak: 0,
        favoritePose: 'None'
      }
    }

    const totalTime = allSessions.reduce((sum, s) => sum + (s.totalTime || 0), 0)
    const scores = allSessions.map(s => s.avgScore || 0).filter(s => s > 0)
    const averageScore = scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0
    const bestScore = Math.max(...scores, 0)

    // Calculate current streak
    const currentStreak = achievementService.calculateStreak(
      allSessions.sort((a, b) => new Date(b.date) - new Date(a.date))
    )

    // Find favorite pose
    const poseCount = {}
    allSessions.forEach(session => {
      session.poseResults?.forEach(pose => {
        poseCount[pose.name] = (poseCount[pose.name] || 0) + 1
      })
    })
    const favoritePose = Object.keys(poseCount).length > 0 ? 
      Object.keys(poseCount).reduce((a, b) => poseCount[a] > poseCount[b] ? a : b) : 'None'

    return {
      totalSessions: allSessions.length,
      totalTime,
      averageScore,
      bestScore,
      currentStreak,
      favoritePose
    }
  }

  analyzeTrends(allSessions) {
    const trends = []
    
    if (allSessions.length < 2) {
      trends.push('Complete more sessions to see detailed trends.')
      return trends
    }

    const recent = allSessions.slice(0, 5)
    const older = allSessions.slice(5, 10)

    if (recent.length >= 3 && older.length >= 3) {
      const recentAvg = recent.reduce((sum, s) => sum + (s.avgScore || 0), 0) / recent.length
      const olderAvg = older.reduce((sum, s) => sum + (s.avgScore || 0), 0) / older.length
      
      if (recentAvg > olderAvg + 5) {
        trends.push('ðŸ“ˆ Your scores are improving over time!')
      } else if (recentAvg < olderAvg - 5) {
        trends.push('ðŸ“‰ Scores have dipped recently - consider reviewing form.')
      } else {
        trends.push('ðŸ“Š Consistent performance maintained.')
      }
    }

    // Practice frequency trend
    const recentDates = recent.map(s => new Date(s.date))
    const daysBetween = recentDates.length > 1 ? 
      (recentDates[0] - recentDates[recentDates.length - 1]) / (1000 * 60 * 60 * 24) / (recentDates.length - 1) : 0
    
    if (daysBetween <= 1.5) {
      trends.push('ðŸ”¥ Great consistency with frequent practice!')
    } else if (daysBetween <= 3) {
      trends.push('âš¡ Good practice frequency.')
    } else {
      trends.push('ðŸ“… Consider practicing more frequently for better results.')
    }

    return trends
  }

  calculateGoalProgress(goal, allSessions) {
    // Simplified goal progress calculation
    const recentSessions = allSessions.slice(0, 10)
    
    switch (goal.toLowerCase()) {
      case 'flexibility':
        return { description: 'Tracking flexibility improvements through backbends and stretches.' }
      case 'strength':
        return { description: 'Building strength through challenging poses and longer holds.' }
      case 'balance':
        return { description: 'Improving balance through standing poses and focus exercises.' }
      case 'stress relief':
        return { description: 'Finding calm through mindful practice and breathing.' }
      default:
        return { description: `Working towards ${goal} through consistent practice.` }
    }
  }

  // Public methods to download reports
  downloadSessionReport(sessionData, userProfile) {
    const doc = this.generateSessionReport(sessionData, userProfile)
    const fileName = `yoga-session-${new Date(sessionData.date).toISOString().split('T')[0]}.pdf`
    doc.save(fileName)
  }

  downloadDashboardReport(userProfile, allSessions) {
    // Calculate achievements
    const achievements = achievementService.getAchievementProgress(userProfile, allSessions)
    
    const doc = this.generateDashboardReport(userProfile, allSessions, achievements)
    const fileName = `yoga-progress-report-${new Date().toISOString().split('T')[0]}.pdf`
    doc.save(fileName)
  }
}

// Global PDF service instance
export const pdfReportService = new PDFReportService()