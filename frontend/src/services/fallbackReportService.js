/**
 * Fallback Report Service
 * Creates text-based reports when PDF generation fails
 */

export class FallbackReportService {
  // Generate text summary of session
  generateSessionSummary(sessionData, userProfile) {
    const lines = []
    lines.push('=== YOGA SESSION REPORT ===')
    lines.push('')
    lines.push(`Date: ${new Date(sessionData.date || new Date()).toLocaleDateString()}`)
    lines.push(`Time: ${new Date(sessionData.date || new Date()).toLocaleTimeString()}`)
    lines.push('')
    
    lines.push('SESSION OVERVIEW:')
    lines.push(`• Duration: ${Math.round((sessionData.totalTime || 0) / 60)} minutes`)
    lines.push(`• Average Score: ${sessionData.avgScore || 0}%`)
    lines.push(`• Poses Practiced: ${sessionData.posesAttempted || 1}`)
    lines.push(`• Perfect Poses: ${sessionData.perfectPoses || 0}`)
    lines.push('')
    
    if (sessionData.poseResults && sessionData.poseResults.length > 0) {
      lines.push('POSE PERFORMANCE:')
      sessionData.poseResults.forEach(pose => {
        lines.push(`• ${pose.name}: ${pose.score}% (held for ${pose.time}s)`)
      })
      lines.push('')
    }
    
    lines.push('RECOMMENDATIONS:')
    const tips = this.generateTips(sessionData)
    tips.forEach(tip => lines.push(`• ${tip}`))
    lines.push('')
    
    lines.push('Generated by CalmAsana - Your AI Yoga Companion')
    
    return lines.join('\n')
  }

  // Generate text summary of dashboard
  generateDashboardSummary(userProfile, allSessions) {
    const lines = []
    lines.push('=== YOGA PROGRESS REPORT ===')
    lines.push('')
    lines.push(`Generated: ${new Date().toLocaleDateString()}`)
    lines.push('')
    
    lines.push('YOUR PROFILE:')
    lines.push(`• Experience Level: ${userProfile.experience?.level || 'Not set'}`)
    lines.push(`• Goals: ${userProfile.experience?.goals?.join(', ') || 'Not set'}`)
    lines.push('')
    
    const stats = this.calculateStats(allSessions)
    lines.push('PRACTICE STATISTICS:')
    lines.push(`• Total Sessions: ${stats.totalSessions}`)
    lines.push(`• Total Practice Time: ${stats.totalMinutes} minutes`)
    lines.push(`• Average Score: ${stats.averageScore}%`)
    lines.push(`• Best Score: ${stats.bestScore}%`)
    lines.push(`• Current Streak: ${stats.currentStreak} days`)
    lines.push('')
    
    lines.push('RECENT PROGRESS:')
    const recentSessions = allSessions.slice(0, 5)
    recentSessions.forEach(session => {
      const date = new Date(session.date).toLocaleDateString()
      const score = session.avgScore || 0
      const time = Math.round((session.totalTime || 0) / 60)
      lines.push(`• ${date}: ${score}% score, ${time} minutes`)
    })
    lines.push('')
    
    lines.push('Generated by CalmAsana - Your AI Yoga Companion')
    
    return lines.join('\n')
  }

  // Calculate basic statistics
  calculateStats(sessions) {
    if (!sessions || sessions.length === 0) {
      return {
        totalSessions: 0,
        totalMinutes: 0,
        averageScore: 0,
        bestScore: 0,
        currentStreak: 0
      }
    }

    const totalSessions = sessions.length
    const totalTime = sessions.reduce((sum, s) => sum + (s.totalTime || 0), 0)
    const totalMinutes = Math.round(totalTime / 60)
    
    const scores = sessions.map(s => s.avgScore || 0).filter(s => s > 0)
    const averageScore = scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0
    const bestScore = Math.max(...scores, 0)
    
    // Simple streak calculation
    let currentStreak = 0
    if (sessions.length > 0) {
      const sortedSessions = sessions.sort((a, b) => new Date(b.date) - new Date(a.date))
      const sessionDates = sortedSessions.map(s => new Date(s.date).toDateString())
      const uniqueDates = [...new Set(sessionDates)]

      const today = new Date().toDateString()
      const yesterday = new Date(Date.now() - 86400000).toDateString()

      let currentDate = uniqueDates.includes(today) ? new Date() : new Date(Date.now() - 86400000)

      for (let i = 0; i < 30; i++) {
        const dateStr = currentDate.toDateString()
        if (uniqueDates.includes(dateStr)) {
          currentStreak++
          currentDate.setDate(currentDate.getDate() - 1)
        } else {
          break
        }
      }
    }

    return {
      totalSessions,
      totalMinutes,
      averageScore,
      bestScore,
      currentStreak
    }
  }

  // Generate helpful tips
  generateTips(sessionData) {
    const tips = []
    const score = sessionData.avgScore || 0

    if (score >= 90) {
      tips.push('Excellent performance! Keep maintaining this high standard.')
    } else if (score >= 70) {
      tips.push('Good session! Try holding poses a bit longer for higher scores.')
    } else if (score >= 50) {
      tips.push('Nice effort! Focus on form and breathing to improve scores.')
    } else {
      tips.push('Keep practicing! Consistency is key to improvement.')
    }

    if ((sessionData.totalTime || 0) < 600) {
      tips.push('Consider extending your practice time for greater benefits.')
    }

    tips.push('Practice regularly to build strength and flexibility.')
    tips.push('Focus on proper breathing throughout your poses.')

    return tips
  }

  // Download as text file
  downloadSessionReport(sessionData, userProfile) {
    const content = this.generateSessionSummary(sessionData, userProfile)
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `yoga-session-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Download as text file
  downloadDashboardReport(userProfile, allSessions) {
    const content = this.generateDashboardSummary(userProfile, allSessions)
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `yoga-progress-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }
}

export const fallbackReportService = new FallbackReportService()