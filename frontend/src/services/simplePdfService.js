/**
 * Simplified PDF Report Service
 * Basic PDF generation that's reliable and won't fail
 */

import jsPDF from 'jspdf'

export class SimplePDFService {
  constructor() {
    this.primaryColor = [102, 126, 234] // RGB for #667eea
    this.textColor = [45, 55, 72] // RGB for #2d3748
    
    // Validate jsPDF is available
    if (typeof jsPDF !== 'function') {
      console.error('jsPDF is not available')
      throw new Error('PDF generation library not available')
    }
  }

  // Generate simple session report
  generateSessionReport(sessionData, userProfile) {
    try {
      const doc = new jsPDF()
      let y = 20

      // Title
      doc.setFontSize(20)
      doc.setTextColor(...this.textColor)
      doc.text('Yoga Session Report', 20, y)
      y += 20

      // Date
      doc.setFontSize(12)
      doc.text(`Date: ${new Date(sessionData.date || new Date()).toLocaleDateString()}`, 20, y)
      y += 10

      // Session Overview
      doc.setFontSize(16)
      doc.text('Session Overview', 20, y)
      y += 15

      doc.setFontSize(12)
      doc.text(`Duration: ${Math.round((sessionData.totalTime || 0) / 60)} minutes`, 20, y)
      y += 8
      doc.text(`Average Score: ${sessionData.avgScore || 0}%`, 20, y)
      y += 8
      doc.text(`Poses Practiced: ${sessionData.posesAttempted || 1}`, 20, y)
      y += 8
      doc.text(`Perfect Poses: ${sessionData.perfectPoses || 0}`, 20, y)
      y += 15

      // Pose Results
      if (sessionData.poseResults && sessionData.poseResults.length > 0) {
        doc.setFontSize(16)
        doc.text('Pose Performance', 20, y)
        y += 15

        sessionData.poseResults.forEach(pose => {
          doc.setFontSize(12)
          doc.text(`${pose.name}: ${pose.score}% (${pose.time}s)`, 20, y)
          y += 8
        })
        y += 10
      }

      // Tips
      doc.setFontSize(16)
      doc.text('Tips for Next Session', 20, y)
      y += 15

      const tips = this.generateTips(sessionData)
      doc.setFontSize(11)
      tips.forEach(tip => {
        const lines = doc.splitTextToSize(`â€¢ ${tip}`, 170)
        lines.forEach(line => {
          doc.text(line, 20, y)
          y += 6
        })
        y += 2
      })

      // Footer
      doc.setFontSize(10)
      doc.setTextColor(120, 120, 120)
      doc.text('Generated by CalmAsana - Your AI Yoga Companion', 20, 280)

      return doc
    } catch (error) {
      console.error('Error generating PDF:', error)
      throw new Error('Failed to generate PDF report')
    }
  }

  // Generate simple dashboard report
  generateDashboardReport(userProfile, allSessions) {
    try {
      const doc = new jsPDF()
      let y = 20

      // Title
      doc.setFontSize(20)
      doc.setTextColor(...this.textColor)
      doc.text('Yoga Progress Report', 20, y)
      y += 20

      // Date
      doc.setFontSize(12)
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, y)
      y += 15

      // User Profile
      doc.setFontSize(16)
      doc.text('Your Profile', 20, y)
      y += 15

      doc.setFontSize(12)
      doc.text(`Experience Level: ${userProfile.experience?.level || 'Not set'}`, 20, y)
      y += 8
      doc.text(`Goals: ${userProfile.experience?.goals?.join(', ') || 'Not set'}`, 20, y)
      y += 15

      // Statistics
      const stats = this.calculateStats(allSessions)
      doc.setFontSize(16)
      doc.text('Practice Statistics', 20, y)
      y += 15

      doc.setFontSize(12)
      doc.text(`Total Sessions: ${stats.totalSessions}`, 20, y)
      y += 8
      doc.text(`Total Practice Time: ${stats.totalMinutes} minutes`, 20, y)
      y += 8
      doc.text(`Average Score: ${stats.averageScore}%`, 20, y)
      y += 8
      doc.text(`Best Score: ${stats.bestScore}%`, 20, y)
      y += 8
      doc.text(`Current Streak: ${stats.currentStreak} days`, 20, y)
      y += 15

      // Recent Progress
      doc.setFontSize(16)
      doc.text('Recent Progress', 20, y)
      y += 15

      const recentSessions = allSessions.slice(0, 5)
      doc.setFontSize(11)
      recentSessions.forEach(session => {
        const date = new Date(session.date).toLocaleDateString()
        const score = session.avgScore || 0
        const time = Math.round((session.totalTime || 0) / 60)
        doc.text(`${date}: ${score}% score, ${time} min`, 20, y)
        y += 6
      })

      // Footer
      doc.setFontSize(10)
      doc.setTextColor(120, 120, 120)
      doc.text('Generated by CalmAsana - Your AI Yoga Companion', 20, 280)

      return doc
    } catch (error) {
      console.error('Error generating dashboard PDF:', error)
      throw new Error('Failed to generate progress report')
    }
  }

  // Calculate basic statistics
  calculateStats(sessions) {
    if (!sessions || sessions.length === 0) {
      return {
        totalSessions: 0,
        totalMinutes: 0,
        averageScore: 0,
        bestScore: 0,
        currentStreak: 0
      }
    }

    const totalSessions = sessions.length
    const totalTime = sessions.reduce((sum, s) => sum + (s.totalTime || 0), 0)
    const totalMinutes = Math.round(totalTime / 60)
    
    const scores = sessions.map(s => s.avgScore || 0).filter(s => s > 0)
    const averageScore = scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0
    const bestScore = Math.max(...scores, 0)
    
    const currentStreak = this.calculateStreak(sessions)

    return {
      totalSessions,
      totalMinutes,
      averageScore,
      bestScore,
      currentStreak
    }
  }

  // Calculate practice streak
  calculateStreak(sessions) {
    if (sessions.length === 0) return 0

    const sortedSessions = sessions.sort((a, b) => new Date(b.date) - new Date(a.date))
    const sessionDates = sortedSessions.map(s => new Date(s.date).toDateString())
    const uniqueDates = [...new Set(sessionDates)]

    let streak = 0
    const today = new Date().toDateString()
    const yesterday = new Date(Date.now() - 86400000).toDateString()

    // Start from today or yesterday
    let currentDate = uniqueDates.includes(today) ? new Date() : new Date(Date.now() - 86400000)

    for (let i = 0; i < 30; i++) { // Check last 30 days max
      const dateStr = currentDate.toDateString()
      if (uniqueDates.includes(dateStr)) {
        streak++
        currentDate.setDate(currentDate.getDate() - 1)
      } else {
        break
      }
    }

    return streak
  }

  // Generate helpful tips
  generateTips(sessionData) {
    const tips = []
    const score = sessionData.avgScore || 0

    if (score >= 90) {
      tips.push('Excellent performance! Keep maintaining this high standard.')
    } else if (score >= 70) {
      tips.push('Good session! Try holding poses a bit longer for higher scores.')
    } else if (score >= 50) {
      tips.push('Nice effort! Focus on form and breathing to improve scores.')
    } else {
      tips.push('Keep practicing! Consistency is key to improvement.')
    }

    if ((sessionData.totalTime || 0) < 600) { // Less than 10 minutes
      tips.push('Consider extending your practice time for greater benefits.')
    }

    tips.push('Practice regularly to build strength and flexibility.')
    tips.push('Focus on proper breathing throughout your poses.')

    return tips
  }

  // Public download methods
  downloadSessionReport(sessionData, userProfile) {
    try {
      // Validate inputs
      if (!sessionData) {
        throw new Error('Session data is required')
      }

      const doc = this.generateSessionReport(sessionData, userProfile)
      const fileName = `yoga-session-${new Date().toISOString().split('T')[0]}.pdf`
      doc.save(fileName)
      return true
    } catch (error) {
      console.error('Error downloading session report:', error)
      throw new Error(`Failed to generate session report: ${error.message}`)
    }
  }

  downloadDashboardReport(userProfile, allSessions) {
    try {
      // Validate inputs
      if (!Array.isArray(allSessions)) {
        allSessions = []
      }

      const doc = this.generateDashboardReport(userProfile, allSessions)
      const fileName = `yoga-progress-${new Date().toISOString().split('T')[0]}.pdf`
      doc.save(fileName)
      return true
    } catch (error) {
      console.error('Error downloading dashboard report:', error)
      throw new Error(`Failed to generate progress report: ${error.message}`)
    }
  }
}

// Export a single instance
export const simplePdfService = new SimplePDFService()